dataset:
  name: vcc
  artifacts_dir: artifacts
  train: data/vcc/train.csv
  dev:   data/vcc/dev.csv
  test:  data/vcc/test.csv
  image_root: data/images   # ảnh VCC nằm trong data/images

columns:
  text: "title"
  caption: "caption_vi"
  label: "label"
  claim_image: "thumbnail_url"   # có thể là 'data/images/xxx.jpg' (đã được resolver xử lý)

text_encoder:
  enabled: true
  name: "vinai/phobert-large"
  max_length: 128
  batch_size: 16

caption_encoder:
  enabled: true
  name: "vinai/phobert-large"
  max_length: 64
  batch_size: 16

image_encoder:
  enabled: true
  name: "tf_efficientnet_b4"
  root: "data/images"      # resolver sẽ tự thử ., .., ../.. và root này
  image_size: 380

clip:
  enabled: true
  # Dùng open-clip (tên model đúng là 'ViT-B-32'); pretrained mặc định trong code: laion2b_s34b_b79k
  name: "ViT-B-32"
  text_enabled: true
  image_enabled: true
  root: "data/images"

precomputed:
  enabled: false

runtime:
  device: "auto"           # auto → CUDA nếu có
  seed: 42
  cv_folds: 5

models:
  # 6 mô hình bạn yêu cầu
  base_learners: ["knn","svm","xgb","nb","lr","mlp"]
  stacking:
    enabled: true
    meta: "xgb"         # dùng XGBoost làm meta-learner

  ensemble:
    bagging:
      enabled: true
      base: "lr"       # bagging trên LR (ổn định, nhanh)
      n_estimators: 15
      max_samples: 0.8
      max_features: 1.0
      bootstrap: true
      random_state: 42
  # metric để chọn ngưỡng trên dev
  threshold_metric: "f1"
  # Optuna: mục tiêu & số trials cho từng model (tùy chỉnh theo tài nguyên)
  optuna:
    objective: "auc"
    trials_default: 20
    trials_per_learner:
      svm: 8
      knn: 15
      xgb: 30
      mlp: 20
      nb: 8
      lr: 12

fusion:
  primary: text            # text là chủ đạo; caption/image hỗ trợ
  strategy: concat


